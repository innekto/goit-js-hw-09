{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEeC,SAASC,cAAc,SAE/BC,iBAAiB,UAKV,SAAQC,GACpBA,EAAMC,iBACN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBG,MAAOC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,QAQC,SAADF,EAAOC,EAAMC,GAClCC,EAAYH,MAAQI,OAAOJ,EAAMK,OACjCF,EAAYF,KAAOG,OAAOH,EAAKI,OAC/BF,EAAYD,OAASE,OAAOF,EAAOG,M,EARnCC,CAAcN,EAAOC,EAAMC,GA0B7B,WACE,IAAK,IAAIK,EAAI,EAAGA,GAAKJ,EAAYD,OAAQK,GAAK,EAC5CC,EAAcD,EAAGJ,EAAYH,OAC1BS,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUX,EAAKU,EAALV,MACjBV,EAAAsB,OAAOC,QAAQ,qBAAoCC,OAAfH,EAAS,QAAYG,OAANd,EAAM,M,IAE1De,OAAM,SAAAL,G,IAAGC,EAAQD,EAARC,SAAUX,EAAKU,EAALV,MAClBV,EAAAsB,OAAOI,QAAQ,oBAAmCF,OAAfH,EAAS,QAAYG,OAANd,EAAM,M,IAE5DG,EAAYH,OAASG,EAAYF,I,CAlCnCgB,E,IATF,IAAMd,EAAc,GAoBL,SAANK,EAAcG,EAAUX,GAC/B,OAAO,IAAIkB,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAER,WAAUX,UAEpBoB,EAAO,CAAET,WAAUX,S,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst fromEl = document.querySelector('.form');\n\nfromEl.addEventListener('submit', onFormSubmit);\n\nconst inputValues = {};\n\n//сабмітимо форму\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  // console.log(delay, step, amount);\n  // console.log(event.currentTarget.elements);\n  getInputValue(delay, step, amount);\n  promisesCycle();\n}\n\n//отримуємо значення інпутів\nfunction getInputValue(delay, step, amount) {\n  inputValues.delay = Number(delay.value);\n  inputValues.step = Number(step.value);\n  inputValues.amount = Number(amount.value);\n}\n\n//створюємо проміс\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n//оновлюємо проміси циклом\nfunction promisesCycle() {\n  for (let i = 1; i <= inputValues.amount; i += 1) {\n    createPromise(i, inputValues.delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    inputValues.delay += inputValues.step;\n  }\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay","step","amount","$ce04d3a99e08e73b$var$inputValues","Number","value","$ce04d3a99e08e73b$var$getInputValue","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$promisesCycle","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.af492b53.js.map"}