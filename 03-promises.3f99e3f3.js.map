{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,kBAASC,EAAcC,EAAUC,GACTC,KAAKC,Q,CASdC,SAASC,cAAc,SAC/BC,iBAAiB,UAIV,SAAQC,GACpBA,EAAMC,iBACN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CV,EAAwBQ,EAAxBR,MAAOW,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,QAQC,SAADZ,EAAOW,EAAMC,GAClCC,EAAYb,MAAQc,OAAOd,EAAMe,OACjCF,EAAYF,KAAOG,OAAOH,EAAKI,OAC/BF,EAAYD,OAASE,OAAOF,EAAOG,M,EARnCC,CAAchB,EAAOW,EAAMC,GA0B7B,WACE,IAAKK,EAAI,EAAGA,GAAKJ,EAAYD,OAAQK,GAAK,EACxCnB,EAAcmB,EAAGJ,EAAYb,OAC1BkB,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBJ,EAAAwB,OAAOC,QAAQ,qBAAoCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAE1DuB,OAAM,SAAAJ,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBJ,EAAAwB,OAAOI,QAAQ,oBAAmCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAE5Da,EAAYb,OAASa,EAAYF,I,CAlCnCc,E,IATF,IAAMZ,EAAc,GAoBL,SAANf,EAAcC,EAAUC,GAC/B,OAAO,IAAI0B,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgB5B,KAAKC,SAAW,GACtC4B,YAAW,WACLD,EACFF,EAAQ,CAAE5B,WAAUC,UAEpB4B,EAAO,CAAE7B,WAAUC,S,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst fromEl = document.querySelector('.form');\nfromEl.addEventListener('submit', onFormSubmit);\nconst inputValues = {};\n\n//сабмітимо форму\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  // console.log(delay, step, amount);\n  // console.log(event.currentTarget.elements);\n  getInputValue(delay, step, amount);\n  promisesCycle();\n}\n\n//отримуємо значення інпутів\nfunction getInputValue(delay, step, amount) {\n  inputValues.delay = Number(delay.value);\n  inputValues.step = Number(step.value);\n  inputValues.amount = Number(amount.value);\n}\n\n//створюємо проміс\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n//оновлюємо проміси циклом\nfunction promisesCycle() {\n  for (i = 1; i <= inputValues.amount; i += 1) {\n    createPromise(i, inputValues.delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    inputValues.delay += inputValues.step;\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","$ce04d3a99e08e73b$var$inputValues","Number","value","$ce04d3a99e08e73b$var$getInputValue","i","then","param","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$promisesCycle","Promise","resolve","reject","shouldResolve","setTimeout"],"version":3,"file":"03-promises.3f99e3f3.js.map"}